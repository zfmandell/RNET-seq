#!/bin/bash
# bam_splitter 0.0.2
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {

    echo "Value of bam: '$bam'"
    echo "Value of fasta: '$fasta'"
    echo "Value of output_prefix: '$output_prefix'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    dx download "$bam" -o bam

    dx download "$fasta" -o fasta

    # Fill in your application code here.
    
    wc -l bam
    samtools view -b -F 4 -f 16 bam > fwd.bam
    wc -l fwd.bam
    samtools view -b -F 4 -F 16 bam > rev.bam
    wc -l rev.bam
    samtools sort -o fwd.sorted.bam fwd.bam 
    wc -l fwd.sorted.bam
    samtools sort -o rev.sorted.bam rev.bam
    wc -l rev.sorted.bam
    base=$output_prefix
    one='_fwd.cov'
    two='_rev.cov'
    base_one=$base$one
    base_two=$base$two
    bedtools  genomecov -d  -ibam fwd.sorted.bam -g fasta > $base_one
    bedtools  genomecov -d  -ibam rev.sorted.bam -g fasta > $base_two

    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    fwd=$(dx upload $base_one --brief)
    rev=$(dx upload $base_two --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output fwd "$fwd" --class=file
    dx-jobutil-add-output rev "$rev" --class=file
}
