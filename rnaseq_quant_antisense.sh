#!/bin/bash
# rnaseq_quant_antisense 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {

    echo "Value of FASTQ: '$FASTQ'"
    echo "Value of organism: '$organism'"
    echo "Value of output_prefix: '$output_prefix'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    dx download "$FASTQ" -o FASTQ.fastq.gz

    # Fill in your application code here.

    if [ "$organism" = "Escherichia coli - NC_000913.2" ] 
    then
        java -jar /trimmomatic-0.39.jar SE -threads 6 -phred33 FASTQ.fastq.gz trimmed.fq.gz ILLUMINACLIP:/trimseq.fasta:2:30:7 MINLEN:20 SLIDINGWINDOW:5:25
        gunzip -c trimmed.fq.gz > fastq_unzip.fq
        stats=$(awk 'BEGIN { t=0.0;sq=0.0; n=0;} ;NR%4==2 {n++;L=length($0);t+=L;sq+=L*L;}END{m=t/n;printf("%f %f",m,sq/n-m*m);}' fastq_unzip.fq)
        IFS=' ' read mean sd <<< $stats
        kallisto index -i index /NC_000913.2.transcriptome.antisense.fasta
        kallisto quant -i index -o results --single --rf-stranded -l $mean -s $sd fastq_unzip.fq
        base=$output_prefix
        two='.quant'
        base_two=$base$two
        cat ./results/abundance.tsv > $base_two
    fi
    if [ "$organism" = "Bacillus subtilis - NC_000964.3" ] 
    then
        java -jar /trimmomatic-0.39.jar SE -threads 6 -phred33 FASTQ.fastq.gz trimmed.fq.gz ILLUMINACLIP:/trimseq.fasta:2:30:7 MINLEN:20 SLIDINGWINDOW:5:25
        gunzip -c trimmed.fq.gz > fastq_unzip.fq
        stats=$(awk 'BEGIN { t=0.0;sq=0.0; n=0;} ;NR%4==2 {n++;L=length($0);t+=L;sq+=L*L;}END{m=t/n;printf("%f %f",m,sq/n-m*m);}' fastq_unzip.fq)
        IFS=' ' read mean sd <<< $stats
        kallisto index -i index /NC_000964.3.transcriptome.antisense.fasta
        kallisto quant -i index -o results --single --rf-stranded -l $mean -s $sd fastq_unzip.fq
        base=$output_prefix
        two='.quant'
        base_two=$base$two
        cat ./results/abundance.tsv > $base_two
    fi

    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    QUANT=$(dx upload $base_two --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output QUANT "$QUANT" --class=file
}
